---
# tasks file for jnvilo.postgresql
- name: Distribution
  debug: msg="{{ ansible_distribution }}"
- name: Distribution version
  debug: msg="{{ ansible_distribution_version}}"
- name: Distribution major version
  debug: msg="{{ ansible_distribution_major_version }}"

- name: Install the pgdg repo
  dnf:
    name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ansible_distribution_major_version}}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    state: present
    disable_gpg_check: yes


- name: Check if postgresql default module is enabled
  command: "dnf module list -qy"
  register: dnf_module_list
  ignore_errors: yes #We don't care about error. We just want to know if there is an error
  changed_when: False  #we are just gathering data here so never set it as chagned
  tags:
    - dnf

- name: Disable the default OS version
  command: "dnf module -qy disable postgresql"
  when: dnf_module_list.stdout | regex_search('postgresql')
  tags:
    - dnf

- fail: msg="minor_version is not defined"
  when: postgresql_minor_version is not defined

- debug: msg="major_version is not defined"
  when: postgresql_major_version is not defined


- name: Install latest version  posgresql
  dnf:
    name: "postgresql{{postgresql_major_version}}-server"
    status: present
  when: postgresql_minor_version is not defined
  register: pgsql_installed

- name: Install specific version of postgresql
  dnf:
    name: "postgresql{{postgresql_major_version}}-server-{{postgresql_minor_version}}"
  when: postgresql_minor_version is defined
  register: pgsql_installed


- debug: msg="{{pgsql_installed}}"
  when: pgsql_installed.changed == True

- name: Initialize the database
  command: "/usr/pgsql-{{postgresql_major_version}}/bin/postgresql-{{postgresql_major_version}}-setup  initdb"
  when: pgsql_installed.changed == True
  notify: Restart Postgresql

- name: Copy patched pg_hba.conf
  copy:
    src: "pg_hba.conf"
    dest: "/var/lib/pgsql/{{postgresql_major_version}}/data/pg_hba.conf"
    owner: postgres
    group: postgress
    mode: '0600'
    backup: yes
  when: pgsql_installed.changed == True
  notify: Restart Postgresql

- name: Revoke access from local user mary on database mydb
  community.postgresql.postgresql_pg_hba:
    dest: /var/lib/pgsql/{{postgresql_major_version}}/data/pg_hba.conf
    contype: local
    users: mary
    databases: mydb
    state: present
    method: trust
  tags:
    - pg_hba

#- name: set localhost to trust
#  community.postgresql.postgresql_pg_hba:
#    dest: /var/lib/pgsql/{{postgresql_major_version}}/data/pg_hba.conf
#    contype: host
#    users: all
#    databases: all
#    state: present
#    source: 127.0.0.1/32
#    method: trust
#  tags:
#    - pg_hba
#
- debug:
    msg: "{{postgresql_pg_hba_conf}}"
  tags:
    - debug

- name: Set access rules in pg_hba
  community.postgresql.postgresql_pg_hba:
    dest: /var/lib/pgsql/{{postgresql_major_version}}/data/pg_hba.conf
    contype: "{{item.type}}"
    users: "{{item.users}}"
    databases: "{{item.databases}}"
    state: "{{item.state}}"
    source: "{{item.source}}"
    method:  "{{item.method}}"
  loop: "{{postgresql_pg_hba_conf}}"
  tags:
    - debug